{
  "paragraphs": [
    {
      "title": "RESTful",
      "text": "%md \nBased on [Demystifying REST][1]\n\nThe main new ideas of REST (REpresentional State Transfer):\n\n* Services are organized around resources\n* Resources have unique URL\n* Resources can be manipulated through HTTP\n* The encoding of the resources can be determined by the client\n* The introduction of Hypertext (or more correct Hypermedia) to the API\n* The clients and service providers share a common information model and the client activation of the services takes the form of requests for lookup, updates or creation of information in the shared information model. \n* The information model takes the form of sets of resources and their relationship. \n\n[1]:http://pettergraff.blogspot.com/2015/10/rest-series-demystifying-rest.html",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468096911750_2076790867",
      "id": "20160709-134151_1672880651",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eBased on \u003ca href\u003d\"http://pettergraff.blogspot.com/2015/10/rest-series-demystifying-rest.html\"\u003eDemystifying REST\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe main new ideas of REST (REpresentional State Transfer):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eServices are organized around resources\u003c/li\u003e\n\u003cli\u003eResources have unique URL\u003c/li\u003e\n\u003cli\u003eResources can be manipulated through HTTP\u003c/li\u003e\n\u003cli\u003eThe encoding of the resources can be determined by the client\u003c/li\u003e\n\u003cli\u003eThe introduction of Hypertext (or more correct Hypermedia) to the API\u003c/li\u003e\n\u003cli\u003eThe clients and service providers share a common information model and the client activation of the services takes the form of requests for lookup, updates or creation of information in the shared information model.\u003c/li\u003e\n\u003cli\u003eThe information model takes the form of sets of resources and their relationship.\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Jul 9, 2016 1:41:51 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Resource",
      "text": "%md \n\nCentral to the idea of REST is the concept of a resource.\n\n* Resource-Set\nA resource-set is a collection of resource instances. When communicating with a service provider a client would address the resource set to perform operations such as\n    * Create a new resource instance\n    * Find a resource instance\n    For those of you with an object-oriented background, imagine the resource-set as a class\n    For those of you that have a relational database background, imagine the resource-set as a table\n\n* Resource-Instance\nA resource-instance represents an individual conceptual object that a client and the server agree upon. Our operations on resource-instances are typically\n    * Read its state (or information)\n    * Update its state (or information)\n    * Remove it from our conceptual resource-set\n    For those of you with an object-oriented background, a good analogy would be an instance/object\n    For those of you with a relational database background, think of the resource-instance as a record\n\nThe fact that we have a resource-set called Patients, does not necessary mean we have a table called patient in our implementation. All we are saying is that as a service provider (e.g., a hospital-admittence server), we understand what you mean by Patient and we have an API that allows clients to manipulate patients. We may for example provide a resource-set upon the URI http://api.hospitals.com/patients which allows you to lookup all our know patients instances (or resource-instances).\n\nWhether a client is referring to a resource-set or a resource-instance is clear in every service invocation by the URI that they use. \n\nA service provider will publish one URI that refers to the resource-set. A resource-instance is always addressed by adding a unique identifier to the resource set. For example, At PayPal we have a resource-set that can be addressed at:\n`https://api.paypal.com/v1/wallet/payments`\n\nIf I wanted to create new payments or find payments, I would use this URI. However if I wanted to read an resource-instance, in this case a specific payment, I would address that at:\n\n`https://api.paypal.com/v1/wallet/payments/293759715`\n\nURI of the `resource-instance` is identified by the `resouce-set` + `“/“` + `the identifier of the payment`.",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468104500547_-1420163480",
      "id": "20160709-154820_1500865687",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eCentral to the idea of REST is the concept of a resource.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eResource-Set\n\u003cbr  /\u003eA resource-set is a collection of resource instances. When communicating with a service provider a client would address the resource set to perform operations such as\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a new resource instance\u003c/li\u003e\n\u003cli\u003eFind a resource instance\n\u003cbr  /\u003eFor those of you with an object-oriented background, imagine the resource-set as a class\n\u003cbr  /\u003eFor those of you that have a relational database background, imagine the resource-set as a table\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eResource-Instance\n\u003cbr  /\u003eA resource-instance represents an individual conceptual object that a client and the server agree upon. Our operations on resource-instances are typically\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRead its state (or information)\u003c/li\u003e\n\u003cli\u003eUpdate its state (or information)\u003c/li\u003e\n\u003cli\u003eRemove it from our conceptual resource-set\n\u003cbr  /\u003eFor those of you with an object-oriented background, a good analogy would be an instance/object\n\u003cbr  /\u003eFor those of you with a relational database background, think of the resource-instance as a record\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe fact that we have a resource-set called Patients, does not necessary mean we have a table called patient in our implementation. All we are saying is that as a service provider (e.g., a hospital-admittence server), we understand what you mean by Patient and we have an API that allows clients to manipulate patients. We may for example provide a resource-set upon the URI http://api.hospitals.com/patients which allows you to lookup all our know patients instances (or resource-instances).\u003c/p\u003e\n\u003cp\u003eWhether a client is referring to a resource-set or a resource-instance is clear in every service invocation by the URI that they use.\u003c/p\u003e\n\u003cp\u003eA service provider will publish one URI that refers to the resource-set. A resource-instance is always addressed by adding a unique identifier to the resource set. For example, At PayPal we have a resource-set that can be addressed at:\n\u003cbr  /\u003e\u003ccode\u003ehttps://api.paypal.com/v1/wallet/payments\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIf I wanted to create new payments or find payments, I would use this URI. However if I wanted to read an resource-instance, in this case a specific payment, I would address that at:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ehttps://api.paypal.com/v1/wallet/payments/293759715\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eURI of the \u003ccode\u003eresource-instance\u003c/code\u003e is identified by the \u003ccode\u003eresouce-set\u003c/code\u003e + \u003ccode\u003e“/“\u003c/code\u003e + \u003ccode\u003ethe identifier of the payment\u003c/code\u003e.\u003c/p\u003e\n"
      },
      "dateCreated": "Jul 9, 2016 3:48:20 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "The CRUDF idea of REST",
      "text": "%md \n\nREST suggest that most of the things we do as clients of services is to manipulate these conceptual resource-instances. In particular, we may Create, Read, Update, Delete and Find instances. \n\nAnother idea in REST is that we’ll identify what we want to do by a combination of URI and HTTP verbs. That is, we can clearly see if the intention of any client request by simply knowing the URI and which _HTTP verb_. HTTP supports a set of verbs.\n\n* GET is used to retrieve  a representation of a resource.  It is a read-only,  idempotent  and safe operation.\n* PUT is used to update a reference to a resource on the  server and  it is idempotent  as well.\n* POST is used to create a resource on the server based on the data  included in the body request. It is the only nonidempotent and  unsafe operation of HTTP.\n* DELETE is used to remove a resource on the server.  It is idempotent  as well.\n* HEAD is similar to GET but returning only a response code and the header associated with the request.\n* OPTIONS is used to request information about the communication options of the addressed resource (e.g., security capabilities such as CORS).\n",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468111986227_-1467693231",
      "id": "20160709-175306_1080791500",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eREST suggest that most of the things we do as clients of services is to manipulate these conceptual resource-instances. In particular, we may Create, Read, Update, Delete and Find instances.\u003c/p\u003e\n\u003cp\u003eAnother idea in REST is that we’ll identify what we want to do by a combination of URI and HTTP verbs. That is, we can clearly see if the intention of any client request by simply knowing the URI and which \u003cem\u003eHTTP verb\u003c/em\u003e. HTTP supports a set of verbs.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGET is used to retrieve  a representation of a resource.  It is a read-only,  idempotent  and safe operation.\u003c/li\u003e\n\u003cli\u003ePUT is used to update a reference to a resource on the  server and  it is idempotent  as well.\u003c/li\u003e\n\u003cli\u003ePOST is used to create a resource on the server based on the data  included in the body request. It is the only nonidempotent and  unsafe operation of HTTP.\u003c/li\u003e\n\u003cli\u003eDELETE is used to remove a resource on the server.  It is idempotent  as well.\u003c/li\u003e\n\u003cli\u003eHEAD is similar to GET but returning only a response code and the header associated with the request.\u003c/li\u003e\n\u003cli\u003eOPTIONS is used to request information about the communication options of the addressed resource (e.g., security capabilities such as CORS).\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Jul 9, 2016 5:53:06 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \nOftenly used combination.\n\n![REST interface types][1]\n\n[1]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/REST_Series__Demystifying_REST___Petter_s_Random_Thoughts_on_Software-URITable.png",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468105949969_815332134",
      "id": "20160709-161229_801908914",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eOftenly used combination.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/REST_Series__Demystifying_REST___Petter_s_Random_Thoughts_on_Software-URITable.png\" alt\u003d\"REST interface types\" /\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Jul 9, 2016 4:12:29 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "API Role",
      "text": "%md \n\n![api role][1]\n\n* Application has OO model and data model\n* RESTful style is leverage data model from service prospective\n\n[1]:http://restful-api-design.readthedocs.io/en/latest/_images/scope.png",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468252899691_574657706",
      "id": "20160711-090139_1886855178",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"http://restful-api-design.readthedocs.io/en/latest/_images/scope.png\" alt\u003d\"api role\" /\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eApplication has OO model and data model\u003c/li\u003e\n\u003cli\u003eRESTful style is leverage data model from service prospective\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Jul 11, 2016 9:01:39 AM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Converting a Functional API to REST",
      "text": "%md \nBased on [Converting a Functional API to REST][2]\n\nA UML diagram for AddressBookService class/interface:\n\n![addressbook][1]\n\nThe interface may manifest itself as a set of Ajax calls or perhaps a simple API in some programming language. E.g. as an interface in Java:\n\n```\ninterface AddressBookService {\n\n  public void addContact(Contact c);\n\n  public Collection\u003cContact\u003e getAllContacts();\n\n  public Contact findById(String contactId);\n\n  public Collection\u003cContact\u003e findByName(String name);\n \n  public Collection\u003cContact\u003e findByAreaCode(String areaCode);\n\n  public void removeContact(String contactId);\n \n  public void updateContact(String contactId, Contact contact);\n \n  public Call callContact(Contact c);\n\n  public Call dialNumber(String digits);\n}\n```\nFrom the interface, we can see `contacts` is a `\u003c\u003cresource-set\u003e\u003e` and `contact` is  `\u003c\u003cresource-instance\u003e\u003e`, and we treat `calls` as another `\u003c\u003cresource-set\u003e\u003e`.\n\n[1]:https://lh3.googleusercontent.com/-9LPqxcQXXxA/VhQlx2_OwlI/AAAAAAAABIc/qtQP1XcqcME/NewImage.png?imgmax\u003d800\n[2]:http://pettergraff.blogspot.com/2015/10/rest-api-part-ii-converting-functional.html\n",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468199787717_1771910605",
      "id": "20160710-181627_955345729",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eBased on \u003ca href\u003d\"http://pettergraff.blogspot.com/2015/10/rest-api-part-ii-converting-functional.html\"\u003eConverting a Functional API to REST\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA UML diagram for AddressBookService class/interface:\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://lh3.googleusercontent.com/-9LPqxcQXXxA/VhQlx2_OwlI/AAAAAAAABIc/qtQP1XcqcME/NewImage.png?imgmax\u003d800\" alt\u003d\"addressbook\" /\u003e\u003c/p\u003e\n\u003cp\u003eThe interface may manifest itself as a set of Ajax calls or perhaps a simple API in some programming language. E.g. as an interface in Java:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einterface AddressBookService {\n\n  public void addContact(Contact c);\n\n  public Collection\u0026lt;Contact\u0026gt; getAllContacts();\n\n  public Contact findById(String contactId);\n\n  public Collection\u0026lt;Contact\u0026gt; findByName(String name);\n\n  public Collection\u0026lt;Contact\u0026gt; findByAreaCode(String areaCode);\n\n  public void removeContact(String contactId);\n\n  public void updateContact(String contactId, Contact contact);\n\n  public Call callContact(Contact c);\n\n  public Call dialNumber(String digits);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom the interface, we can see \u003ccode\u003econtacts\u003c/code\u003e is a \u003ccode\u003e\u0026lt;\u0026lt;resource-set\u0026gt;\u0026gt;\u003c/code\u003e and \u003ccode\u003econtact\u003c/code\u003e is  \u003ccode\u003e\u0026lt;\u0026lt;resource-instance\u0026gt;\u0026gt;\u003c/code\u003e, and we treat \u003ccode\u003ecalls\u003c/code\u003e as another \u003ccode\u003e\u0026lt;\u0026lt;resource-set\u0026gt;\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n"
      },
      "dateCreated": "Jul 10, 2016 6:16:27 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Tools",
      "text": "%md \nCommon API Language with Tools\n* [Swagger][1]\n* [RAML][2]\n* [APIBluePrint][3]\n\nTools\n* [genmymodel][6] free online modeling tool for EMF, BPMN,... \n* [EMF-REST][4] can generate API from EMF model   \n* [restlet][5] supports both Swagger and RAML   \n\n[1]:http://swagger.io/\n[2]:http://raml.org/\n[3]:https://apiblueprint.org/\n[4]:http://som-research.uoc.edu/tools/emf-rest/\n[5]:https://studio.restlet.com/apis/local/info\n[6]:https://www.genmymodel.com/",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468200436457_-1807109030",
      "id": "20160710-182716_220580290",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eCommon API Language with Tools\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"http://swagger.io/\"\u003eSwagger\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://raml.org/\"\u003eRAML\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"https://apiblueprint.org/\"\u003eAPIBluePrint\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTools\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"https://www.genmymodel.com/\"\u003egenmymodel\u003c/a\u003e free online modeling tool for EMF, BPMN,\u0026hellip;\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://som-research.uoc.edu/tools/emf-rest/\"\u003eEMF-REST\u003c/a\u003e can generate API from EMF model\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"https://studio.restlet.com/apis/local/info\"\u003erestlet\u003c/a\u003e supports both Swagger and RAML\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Jul 10, 2016 6:27:16 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Restlet",
      "text": "%md \nLearning \n* [video][1]   \n\nSteps:   \n1. click `APIs` menu -\u003e `clear` to start a blank form.\n2. enter general information, then `save`.\n3. click `add` button in endpoint [create entrypoint in restlet][2], enter `Domain name`, for example `exmple.com` and `Base path`, for example, `/api/v1`  \n4. click `add` button in section [create product section][3] to create data model, called `Product`\n5. select `Product` in section then click `add` button in Representation, enter `Product` in prompt, this is what we get in `Design`, `Swagger` and `RAML` tabs\n   ![Design-addRepresentations][4],\n   ![Swagger-addRepresentations][5],\n   ![RAML-addRepresentations][6]\n\n6. select `Product` in Representation, then click `add properties`, then type `property name` (id), `property description` (id). `type` (integer) and select the checkbox required.\n7. click `add properties` again to add a `name` for the product and select `string` type.  \n8. click `add resource`, add `relative path` (/products), `name` (ProductsListResource) and select `method`. This is `\u003c\u003cresource-set\u003e\u003e` ![7]\n9. do the same for productid, which is a `\u003c\u003cresource-instance\u003e\u003e` ![8]\n10. add path variable ![9]\n11. modify `post` method of `products` resource.\n\n[1]:https://vimeo.com/161117920\n[2]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-createEntryPoint.png\n[3]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addSection.png\n[4]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addRepresentatons.png\n[5]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addRepresentatons-Swagger.png\n[6]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addRepresentatons-RAML.png\n[7]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addResource.png\n[8]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-productid.png\n[9]:https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-productidPath.png\n",
      "dateUpdated": "Jul 11, 2016 2:45:55 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468251164649_1397384960",
      "id": "20160711-083244_2118325054",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eLearning\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"https://vimeo.com/161117920\"\u003evideo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSteps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eclick \u003ccode\u003eAPIs\u003c/code\u003e menu -\u003e \u003ccode\u003eclear\u003c/code\u003e to start a blank form.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eenter general information, then \u003ccode\u003esave\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eclick \u003ccode\u003eadd\u003c/code\u003e button in endpoint \u003ca href\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-createEntryPoint.png\"\u003ecreate entrypoint in restlet\u003c/a\u003e, enter \u003ccode\u003eDomain name\u003c/code\u003e, for example \u003ccode\u003eexmple.com\u003c/code\u003e and \u003ccode\u003eBase path\u003c/code\u003e, for example, \u003ccode\u003e/api/v1\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eclick \u003ccode\u003eadd\u003c/code\u003e button in section \u003ca href\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addSection.png\"\u003ecreate product section\u003c/a\u003e to create data model, called \u003ccode\u003eProduct\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eselect \u003ccode\u003eProduct\u003c/code\u003e in section then click \u003ccode\u003eadd\u003c/code\u003e button in Representation, enter \u003ccode\u003eProduct\u003c/code\u003e in prompt, this is what we get in \u003ccode\u003eDesign\u003c/code\u003e, \u003ccode\u003eSwagger\u003c/code\u003e and \u003ccode\u003eRAML\u003c/code\u003e tabs\n\u003cbr  /\u003e\u003cimg src\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addRepresentatons.png\" alt\u003d\"Design-addRepresentations\" /\u003e,\n\u003cbr  /\u003e\u003cimg src\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addRepresentatons-Swagger.png\" alt\u003d\"Swagger-addRepresentations\" /\u003e,\n\u003cbr  /\u003e\u003cimg src\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addRepresentatons-RAML.png\" alt\u003d\"RAML-addRepresentations\" /\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eselect \u003ccode\u003eProduct\u003c/code\u003e in Representation, then click \u003ccode\u003eadd properties\u003c/code\u003e, then type \u003ccode\u003eproperty name\u003c/code\u003e (id), \u003ccode\u003eproperty description\u003c/code\u003e (id). \u003ccode\u003etype\u003c/code\u003e (integer) and select the checkbox required.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eclick \u003ccode\u003eadd properties\u003c/code\u003e again to add a \u003ccode\u003ename\u003c/code\u003e for the product and select \u003ccode\u003estring\u003c/code\u003e type.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eclick \u003ccode\u003eadd resource\u003c/code\u003e, add \u003ccode\u003erelative path\u003c/code\u003e (/products), \u003ccode\u003ename\u003c/code\u003e (ProductsListResource) and select \u003ccode\u003emethod\u003c/code\u003e. This is \u003ccode\u003e\u0026lt;\u0026lt;resource-set\u0026gt;\u0026gt;\u003c/code\u003e \u003cimg src\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-addResource.png\" alt\u003d\"7\" /\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003edo the same for productid, which is a \u003ccode\u003e\u0026lt;\u0026lt;resource-instance\u0026gt;\u0026gt;\u003c/code\u003e \u003cimg src\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-productid.png\" alt\u003d\"8\" /\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eadd path variable \u003cimg src\u003d\"https://raw.githubusercontent.com/rkuo/Zeppelin-Notebooks/master/2BPAC2MQF/images/Design_an_API_from_scratch_with_Restlet_Studio_on_Vimeo-productidPath.png\" alt\u003d\"9\" /\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n"
      },
      "dateCreated": "Jul 11, 2016 8:32:44 AM",
      "dateStarted": "Jul 11, 2016 2:41:34 PM",
      "dateFinished": "Jul 11, 2016 2:41:34 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Swagger",
      "text": "%md   \n\n",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468200478058_-1642943843",
      "id": "20160710-182758_741941385",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jul 10, 2016 6:27:58 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "RAML",
      "text": "%md ",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468200468316_-1746087197",
      "id": "20160710-182748_1555552249",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jul 10, 2016 6:27:48 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "REST with UML",
      "text": "%md \n\n![Design and implement RESTful web services with Rational Software Architect][2]   \n* [Modelling a REST API with UML and keeping it agile][3] describes how to model API with general UML tool; [IBM Rational Software Architect][6] and [Visual Paradigm][5] tools have tis feature   \n* [emf-rest][4] a plugin can be used to model with EMF and to generate API, a more complete document [EMF-REST: Generation of RESTful APIs from Models][7]   \n* [Modeling RESTful applications][8]   \n* [A conversation based approach for modeling REST APIs][9]   \n* [UML-based Model-Driven REST API Development][10]   \n* [Modeling RESTful applications][11]    \n\n[1]:http://www.ibm.com/developerworks/rational/library/design-implement-restful-web-services/\n[2]:http://www.ibm.com/developerworks/rational/library/design-implement-restful-web-services/image001.jpg\n[3]:http://callistaenterprise.se/blogg/teknik/2014/08/05/modelling-a-rest-api-with-uml-and-keeping-it-agile/\n[4]:http://som-research.uoc.edu/tools/emf-rest/install.html\n[5]:https://www.visual-paradigm.com/support/documents/vpuserguide/276/3420/85154_modelingrest.html\n[6]:https://www.ibm.com/developerworks/rational/library/design-implement-restful-web-services/\n[7]:http://arxiv.org/pdf/1504.03498.pdf\n[8]:http://ws-rest.org/2011/proc/a4-schreier.pdf\n[9]:http://www.iaas.uni-stuttgart.de/RUS-data/INPROC-2015-10%20-%20A%20conversation%20based%20approach%20for%20modeling%20REST%20APIs.pdf\n[10]:http://www.scitepress.org/DigitalLibrary/PublicationsDetail.aspx?ID\u003d1Gjb858+pxE%3d\u0026t\u003d1\n[11]:http://ws-rest.org/2011/proc/a4-schreier.pdf\n",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468097011386_1102175930",
      "id": "20160709-134331_1877049963",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"http://www.ibm.com/developerworks/rational/library/design-implement-restful-web-services/image001.jpg\" alt\u003d\"Design and implement RESTful web services with Rational Software Architect\" /\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"http://callistaenterprise.se/blogg/teknik/2014/08/05/modelling-a-rest-api-with-uml-and-keeping-it-agile/\"\u003eModelling a REST API with UML and keeping it agile\u003c/a\u003e describes how to model API with general UML tool; \u003ca href\u003d\"https://www.ibm.com/developerworks/rational/library/design-implement-restful-web-services/\"\u003eIBM Rational Software Architect\u003c/a\u003e and \u003ca href\u003d\"https://www.visual-paradigm.com/support/documents/vpuserguide/276/3420/85154_modelingrest.html\"\u003eVisual Paradigm\u003c/a\u003e tools have tis feature\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://som-research.uoc.edu/tools/emf-rest/install.html\"\u003eemf-rest\u003c/a\u003e a plugin can be used to model with EMF and to generate API, a more complete document \u003ca href\u003d\"http://arxiv.org/pdf/1504.03498.pdf\"\u003eEMF-REST: Generation of RESTful APIs from Models\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://ws-rest.org/2011/proc/a4-schreier.pdf\"\u003eModeling RESTful applications\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://www.iaas.uni-stuttgart.de/RUS-data/INPROC-2015-10%20-%20A%20conversation%20based%20approach%20for%20modeling%20REST%20APIs.pdf\"\u003eA conversation based approach for modeling REST APIs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://www.scitepress.org/DigitalLibrary/PublicationsDetail.aspx?ID\u003d1Gjb858+pxE%3d\u0026amp;t\u003d1\"\u003eUML-based Model-Driven REST API Development\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://ws-rest.org/2011/proc/a4-schreier.pdf\"\u003eModeling RESTful applications\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Jul 9, 2016 1:43:31 PM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ",
      "dateUpdated": "Jul 11, 2016 12:52:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1468251691364_-633769070",
      "id": "20160711-084131_460954024",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jul 11, 2016 8:41:31 AM",
      "dateStarted": "Jul 11, 2016 12:52:01 PM",
      "dateFinished": "Jul 11, 2016 12:52:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "RESTful API",
  "id": "2BPAC2MQF",
  "lastReplName": {
    "value": "md"
  },
  "angularObjects": {
    "2BRKFDTAG:shared_process": [],
    "2BQQC4SBJ:shared_process": [],
    "2BPA86SJN:shared_process": [],
    "2BQXP1N48:shared_process": [],
    "2BS635YF4:shared_process": [],
    "2BS8S9TWZ:shared_process": [],
    "2BT1FV53K:shared_process": [],
    "2BRG4EDQT:shared_process": [],
    "2BRBKMV6G:shared_process": [],
    "2BPX9HXK8:shared_process": [],
    "2BPCX21MY:shared_process": [],
    "2BP9JV898:shared_process": [],
    "2BR9MHZJ2:shared_process": [],
    "2BPA7NY6F:shared_process": [],
    "2BPMUQW6X:shared_process": [],
    "2BREB797U:shared_process": [],
    "2BRNDK1X2:shared_process": []
  },
  "config": {},
  "info": {}
}