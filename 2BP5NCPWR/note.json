{
  "paragraphs": [
    {
      "title": "1.0 The Basic",
      "text": "%md\n# Scala \n\nThis study note is based on the book [Scala for the Impatient][2] and [Programming Scala-First Edition][1]; also see [First Step in Scala for First Time Programmers][3]\n\n[1]:https://www.amazon.com/Programming-Scala-Updated-2-12/dp/0981531687/ref\u003dsr_1_1?s\u003dbooks\u0026ie\u003dUTF8\u0026qid\u003d1466181835\u0026sr\u003d1-1\u0026keywords\u003dscala+programming\n[2]:https://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094/ref\u003dsr_1_1?s\u003dbooks\u0026ie\u003dUTF8\u0026qid\u003d1466182192\u0026sr\u003d1-1\u0026keywords\u003dscala+impatient\n[3]:http://bcomposes.com/2011/08/22/first-steps-in-scala-for-first-time-programmers-part-1/",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:36:53 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466181571251_771249663",
      "id": "20160617-093931_529811073",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch1\u003eScala\u003c/h1\u003e\n\u003cp\u003eThis study note is based on the book \u003ca href\u003d\"https://www.amazon.com/Scala-Impatient-Cay-S-Horstmann/dp/0321774094/ref\u003dsr_1_1?s\u003dbooks\u0026amp;ie\u003dUTF8\u0026amp;qid\u003d1466182192\u0026amp;sr\u003d1-1\u0026amp;keywords\u003dscala+impatient\"\u003eScala for the Impatient\u003c/a\u003e and \u003ca href\u003d\"https://www.amazon.com/Programming-Scala-Updated-2-12/dp/0981531687/ref\u003dsr_1_1?s\u003dbooks\u0026amp;ie\u003dUTF8\u0026amp;qid\u003d1466181835\u0026amp;sr\u003d1-1\u0026amp;keywords\u003dscala+programming\"\u003eProgramming Scala-First Edition\u003c/a\u003e; also see \u003ca href\u003d\"http://bcomposes.com/2011/08/22/first-steps-in-scala-for-first-time-programmers-part-1/\"\u003eFirst Step in Scala for First Time Programmers\u003c/a\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 9:39:31 AM",
      "dateStarted": "Jun 21, 2016 8:45:53 AM",
      "dateFinished": "Jun 21, 2016 8:45:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Chapter 1 The Basic",
      "text": "%md\nTo learn:\n* Defining variables with var and val\n* Numeric types\n* Using operators and functions\n* Navigating Scaladoc\n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:39:19 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466555840153_1243059058",
      "id": "20160621-173720_1888989735",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eTo learn:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDefining variables with var and val\u003c/li\u003e\n\u003cli\u003eNumeric types\u003c/li\u003e\n\u003cli\u003eUsing operators and functions\u003c/li\u003e\n\u003cli\u003eNavigating Scaladoc\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Jun 21, 2016 5:37:20 PM",
      "dateStarted": "Jun 21, 2016 5:39:19 PM",
      "dateFinished": "Jun 21, 2016 5:39:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "1.1 Scala Interpreter",
      "text": "%md\nSince Zeppelin supports Scala in default, there is not additional interpreter flag (%) is needed. We can use it as Read-Eval-Print-Loop (REPL) out of box.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:53 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466182262765_1260601526",
      "id": "20160617-095102_718414910",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eSince Zeppelin supports Scala in default, there is not additional interpreter flag (%) is needed. We can use it as Read-Eval-Print-Loop (REPL) out of box.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 9:51:02 AM",
      "dateStarted": "Jun 21, 2016 8:45:53 AM",
      "dateFinished": "Jun 21, 2016 8:45:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "8 * 5 + 2   //The interpreter will assign a variable like `res0` to hold the result. The number is created in sequence. Each time we run the paragraph, we get a next number. ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:08:46 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466182712898_686968275",
      "id": "20160617-095832_105071488",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res66: Int \u003d 42\n"
      },
      "dateCreated": "Jun 17, 2016 9:58:32 AM",
      "dateStarted": "Jun 21, 2016 5:08:46 PM",
      "dateFinished": "Jun 21, 2016 5:08:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "0.5 * res66   //follow the name, res??, generated above ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:13:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466182975341_-1884913369",
      "id": "20160617-100255_647248168",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res72: Double \u003d 21.0\n"
      },
      "dateCreated": "Jun 17, 2016 10:02:55 AM",
      "dateStarted": "Jun 21, 2016 5:13:01 PM",
      "dateFinished": "Jun 21, 2016 5:13:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\"Hello, \" + res66",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:09:13 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466183027556_-466436119",
      "id": "20160617-100347_1361603513",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res70: String \u003d Hello, 42\n"
      },
      "dateCreated": "Jun 17, 2016 10:03:47 AM",
      "dateStarted": "Jun 21, 2016 5:09:13 PM",
      "dateFinished": "Jun 21, 2016 5:09:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThe interpreter automatically convert 42 value to String and display the type of result: String. Zeppelin also includes a _tab completion_, use key `ctnl+.`. We can try by typing `res0.to` then hit `cntl+.`. We will get a list of choices such as `toString`, `toShort`, `toLong`,... we can use upper-arrow or down-arrow key to select the choice then hit enter key.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:10:03 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466183168984_421011028",
      "id": "20160617-100608_807857905",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eThe interpreter automatically convert 42 value to String and display the type of result: String. Zeppelin also includes a \u003cem\u003etab completion\u003c/em\u003e, use key \u003ccode\u003ectnl+.\u003c/code\u003e. We can try by typing \u003ccode\u003eres0.to\u003c/code\u003e then hit \u003ccode\u003ecntl+.\u003c/code\u003e. We will get a list of choices such as \u003ccode\u003etoString\u003c/code\u003e, \u003ccode\u003etoShort\u003c/code\u003e, \u003ccode\u003etoLong\u003c/code\u003e,\u0026hellip; we can use upper-arrow or down-arrow key to select the choice then hit enter key.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 10:06:08 AM",
      "dateStarted": "Jun 21, 2016 5:10:00 PM",
      "dateFinished": "Jun 21, 2016 5:10:00 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// put cursor after `to` then hit `cntl+.` to see choices. \nres66.to",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:11:20 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466184389913_409586744",
      "id": "20160617-102629_1399349947",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:34: error: ambiguous reference to overloaded definition,\nboth method to in class RichInt of type (end: Int, step: Int)scala.collection.immutable.Range.Inclusive\nand  method to in class RichInt of type (end: Int)scala.collection.immutable.Range.Inclusive\nmatch expected type ?\n              res9.to\n                   ^\n"
      },
      "dateCreated": "Jun 17, 2016 10:26:29 AM",
      "dateStarted": "Jun 21, 2016 8:47:05 AM",
      "dateFinished": "Jun 21, 2016 8:47:05 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "1.2 Declaring Values and Variables",
      "text": "%md\nInstead accepting system generate name, `res0`, `res1`, `res2`,..., we can define our own names.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466185560988_-1742463807",
      "id": "20160617-104600_619261351",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eInstead accepting system generate name, \u003ccode\u003eres0\u003c/code\u003e, \u003ccode\u003eres1\u003c/code\u003e, \u003ccode\u003eres2\u003c/code\u003e,\u0026hellip;, we can define our own names.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 10:46:00 AM",
      "dateStarted": "Jun 21, 2016 8:45:54 AM",
      "dateFinished": "Jun 21, 2016 8:45:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val answer \u003d 8 * 5 + 2",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466185885957_-721449140",
      "id": "20160617-105125_1625251218",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "answer: Int \u003d 42\n"
      },
      "dateCreated": "Jun 17, 2016 10:51:25 AM",
      "dateStarted": "Jun 21, 2016 8:45:54 AM",
      "dateFinished": "Jun 21, 2016 8:45:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "0.5 * answer",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466186019885_-1551151658",
      "id": "20160617-105339_452629584",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res16: Double \u003d 21.0\n"
      },
      "dateCreated": "Jun 17, 2016 10:53:39 AM",
      "dateStarted": "Jun 21, 2016 8:45:54 AM",
      "dateFinished": "Jun 21, 2016 8:45:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \nValue declared with `val` is constant, which cannot be changed. We will get error message, if we do.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466186069366_1096766893",
      "id": "20160617-105429_1337139170",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eValue declared with \u003ccode\u003eval\u003c/code\u003e is constant, which cannot be changed. We will get error message, if we do.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 10:54:29 AM",
      "dateStarted": "Jun 21, 2016 8:45:54 AM",
      "dateFinished": "Jun 21, 2016 8:45:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "answer \u003d 0",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466186916204_-1860063463",
      "id": "20160617-110836_1719595458",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:29: error: reassignment to val\n         answer \u003d 0\n                ^\n"
      },
      "dateCreated": "Jun 17, 2016 11:08:36 AM",
      "dateStarted": "Jun 21, 2016 8:45:54 AM",
      "dateFinished": "Jun 21, 2016 8:45:54 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe can declare a name to hold the value as variable.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466186958155_-1929056109",
      "id": "20160617-110918_1524054169",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eWe can declare a name to hold the value as variable.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 11:09:18 AM",
      "dateStarted": "Jun 21, 2016 8:45:54 AM",
      "dateFinished": "Jun 21, 2016 8:45:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// this is ok\nvar counter \u003d 0\nvar counter \u003d 1\n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466187056103_1214127866",
      "id": "20160617-111056_974555977",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "counter: Int \u003d 0\ncounter: Int \u003d 1\n"
      },
      "dateCreated": "Jun 17, 2016 11:10:56 AM",
      "dateStarted": "Jun 21, 2016 8:45:55 AM",
      "dateFinished": "Jun 21, 2016 8:45:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nWe do not need to specify the type of variable or value. The type is inferred from the expression of initialization. We can also initialize several variables/values at the same time. Different from Java, Scala declares the type after the name of variable/value. ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466187280926_-280334264",
      "id": "20160617-111440_1523052836",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eWe do not need to specify the type of variable or value. The type is inferred from the expression of initialization. We can also initialize several variables/values at the same time. Different from Java, Scala declares the type after the name of variable/value.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 11:14:40 AM",
      "dateStarted": "Jun 21, 2016 8:45:54 AM",
      "dateFinished": "Jun 21, 2016 8:45:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "1.3 Commonly Used Types",
      "text": "%md\nScala has seven different numeric types: Byte, Char, Short, Int, Long, Float, Double, and Boolean type. In Scala, type is class. We can call its methods on numbers. ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466187663656_-679584318",
      "id": "20160617-112103_588117930",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eScala has seven different numeric types: Byte, Char, Short, Int, Long, Float, Double, and Boolean type. In Scala, type is class. We can call its methods on numbers.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 11:21:03 AM",
      "dateStarted": "Jun 21, 2016 8:45:54 AM",
      "dateFinished": "Jun 21, 2016 8:45:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "1.toString // yields a string \"1\"\n1.to(10)   // yields a range (1,2,3,...10)",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466188089464_590701664",
      "id": "20160617-112809_492116530",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res20: String \u003d 1\nres21: scala.collection.immutable.Range.Inclusive \u003d Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n"
      },
      "dateCreated": "Jun 17, 2016 11:28:09 AM",
      "dateStarted": "Jun 21, 2016 8:45:55 AM",
      "dateFinished": "Jun 21, 2016 8:45:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "(1 to 4).map(_+3)  //[4,5,6,7]\n        .filter(_\u003e5)  //[6,7]\n        .foldRight(2)(_+_)  //2+6+7\u003d15",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466217131026_169416343",
      "id": "20160617-193211_1895329098",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res23: Int \u003d 15\n"
      },
      "dateCreated": "Jun 17, 2016 7:32:11 PM",
      "dateStarted": "Jun 21, 2016 8:45:55 AM",
      "dateFinished": "Jun 21, 2016 8:45:56 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n//this converts to StringOps, which serves as a wrapper providing Strings with all the operations found in indexed sequences.\n//see more details http://lampwww.epfl.ch/~hmiller/scaladoc/library/scala/collection/immutable/StringOps.html\n\"hello\".intersect(\"world\")",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466516948558_-543059339",
      "id": "20160621-064908_1505975593",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e//this converts to StringOps, which serves as a wrapper providing Strings with all the operations found in indexed sequences.\n\u003cbr  /\u003e//see more details http://lampwww.epfl.ch/~hmiller/scaladoc/library/scala/collection/immutable/StringOps.html\n\u003cbr  /\u003e\u0026ldquo;hello\u0026rdquo;.intersect(\u0026ldquo;world\u0026rdquo;)\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 21, 2016 6:49:08 AM",
      "dateStarted": "Jun 21, 2016 8:45:55 AM",
      "dateFinished": "Jun 21, 2016 8:45:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "1.4 Arithmetic and Operator Overloading",
      "text": "%md\nThe + - * / are operators, which actually is method of some class. For example:",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:29:07 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466517259526_-841379299",
      "id": "20160621-065419_925978201",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eThe + - * / are operators, which actually is method of some class. For example:\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 21, 2016 6:54:19 AM",
      "dateStarted": "Jun 21, 2016 8:45:55 AM",
      "dateFinished": "Jun 21, 2016 8:45:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val c \u003d 5 + 8 //or\n5 .+ (8)      //should not write like 5.+(8), which interprets 5. as double",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466517483425_-2022280419",
      "id": "20160621-065803_1266618855",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "c: Int \u003d 13\nres25: Int \u003d 13\n"
      },
      "dateCreated": "Jun 21, 2016 6:58:03 AM",
      "dateStarted": "Jun 21, 2016 8:45:56 AM",
      "dateFinished": "Jun 21, 2016 8:45:56 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Scala does not have ++ or --, instead, it has +\u003d and -+\nvar counter \u003d 0\ncounter +\u003d 1\nprint(counter)",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466517775354_-1049405337",
      "id": "20160621-070255_352676842",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "counter: Int \u003d 0\n1"
      },
      "dateCreated": "Jun 21, 2016 7:02:55 AM",
      "dateStarted": "Jun 21, 2016 8:45:56 AM",
      "dateFinished": "Jun 21, 2016 8:45:57 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "1.5 Calling Functions and Methods",
      "text": "//Scala does not have static method. For math function, we just have to import the library\nimport scala.math._  //means all math function\nsqrt(2)\nmax(3, 4)\nmin(3, Pi)  //P is uppercase",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466519731892_103692574",
      "id": "20160621-073531_1245246499",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import scala.math._\nres32: Double \u003d 1.4142135623730951\nres33: Int \u003d 4\nres34: Double \u003d 3.0\n"
      },
      "dateCreated": "Jun 21, 2016 7:35:31 AM",
      "dateStarted": "Jun 21, 2016 8:45:56 AM",
      "dateFinished": "Jun 21, 2016 8:45:57 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\"hello\".distinct  //when there is no parameter, () can be eliminated",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466520038082_-606124819",
      "id": "20160621-074038_1339644817",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res36: String \u003d helo\n"
      },
      "dateCreated": "Jun 21, 2016 7:40:38 AM",
      "dateStarted": "Jun 21, 2016 8:45:57 AM",
      "dateFinished": "Jun 21, 2016 8:45:57 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "1.6 The Apply Method",
      "text": "%md\nWe often see the syntax like function call, for example, s(i); this is ith element in String s; like s[i] in C++, or like s.charAt(i) in Java. We can also think this is an overloaded () operator. For example:",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:26:36 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466520287650_1210996619",
      "id": "20160621-074447_1851116974",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eWe often see the syntax like function call, for example, s(i); this is ith element in String s; like s[i] in C++, or like s.charAt(i) in Java. We can also think this is an overloaded () operator. For example:\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 21, 2016 7:44:47 AM",
      "dateStarted": "Jun 21, 2016 5:26:31 PM",
      "dateFinished": "Jun 21, 2016 5:26:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\"hello\"(4)  //() is an operator\n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466522224968_2122038210",
      "id": "20160621-081704_1718784432",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res38: Char \u003d o\n"
      },
      "dateCreated": "Jun 21, 2016 8:17:04 AM",
      "dateStarted": "Jun 21, 2016 8:45:57 AM",
      "dateFinished": "Jun 21, 2016 8:45:57 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\"hello\"(4)  //is a shortcut for\n//http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.StringOps\n\"hello\".apply(4)  //StringOps has a method `apply`; return element at index n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466522414119_-1019776980",
      "id": "20160621-082014_1272568394",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res40: Char \u003d o\nres41: Char \u003d o\n"
      },
      "dateCreated": "Jun 21, 2016 8:20:14 AM",
      "dateStarted": "Jun 21, 2016 8:45:57 AM",
      "dateFinished": "Jun 21, 2016 8:45:58 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "1.7 ScalaDoc",
      "text": "%md\n[scaladoc][1]\n\n[1]: http://www.scala-lang.org/api",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 8:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466523629545_-1428804455",
      "id": "20160621-084029_1373392124",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003ca href\u003d\"http://www.scala-lang.org/api\"\u003escaladoc\u003c/a\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 21, 2016 8:40:29 AM",
      "dateStarted": "Jun 21, 2016 8:45:55 AM",
      "dateFinished": "Jun 21, 2016 8:45:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Chapter 2 - Control Structure and Function",
      "text": "%md\nTo learn:\n* expression vs statement\n* if expression as a value\n* block has a value - the value of the last expression\n* for loop like enhanced Java for-loop\n* semi-colons are optional, avoid using return in a function, void in Java is Unit in scala.\n* aware missing \u003d sign in function definition\n* exception works just like in Java, except we use pattern match to catch, there is no checked exceptions",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 5:30:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466182398483_800658024",
      "id": "20160617-095318_684837004",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eTo learn:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eexpression vs statement\u003c/li\u003e\n\u003cli\u003eif expression as a value\u003c/li\u003e\n\u003cli\u003eblock has a value - the value of the last expression\u003c/li\u003e\n\u003cli\u003efor loop like enhanced Java for-loop\u003c/li\u003e\n\u003cli\u003esemi-colons are optional, avoid using return in a function, void in Java is Unit in scala.\u003c/li\u003e\n\u003cli\u003eaware missing \u003d sign in function definition\u003c/li\u003e\n\u003cli\u003eexception works just like in Java, except we use pattern match to catch, there is no checked exceptions\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Jun 17, 2016 9:53:18 AM",
      "dateStarted": "Jun 21, 2016 5:26:52 PM",
      "dateFinished": "Jun 21, 2016 5:26:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.1 Conditional Expressions",
      "text": "%md\nEverything \"evaluates\" to a value. Every possible value is an object (so every expression evaluates to an object). By the way, functions, as first-class citizens in Scala, are objects, too. We can group multiple expressions and statements to form a larger expression using curly braces. A multi-line expression will always take the value of its last subexpression. \n\nA statement is one that does not return a value, e.g. class Foo { } is a statement, and does not evaluate to any value.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 9:31:02 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466525813389_1176811378",
      "id": "20160621-091653_326861084",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eEverything \u0026ldquo;evaluates\u0026rdquo; to a value. Every possible value is an object (so every expression evaluates to an object). By the way, functions, as first-class citizens in Scala, are objects, too. We can group multiple expressions and statements to form a larger expression using curly braces. A multi-line expression will always take the value of its last subexpression.\u003c/p\u003e\n\u003cp\u003eA statement is one that does not return a value, e.g. class Foo { } is a statement, and does not evaluate to any value.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 21, 2016 9:16:53 AM",
      "dateStarted": "Jun 22, 2016 9:31:01 AM",
      "dateFinished": "Jun 22, 2016 9:31:01 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// 3 different ways to write if expression.\n// it returns a value, so it is expression.\nval x \u003d 1\nif (x \u003e 0) 1 else -1",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 6:42:09 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466556975771_-859171706",
      "id": "20160621-175615_1363748408",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "x: Int \u003d 1\nres78: Int \u003d 1\n"
      },
      "dateCreated": "Jun 21, 2016 5:56:15 PM",
      "dateStarted": "Jun 21, 2016 6:42:09 PM",
      "dateFinished": "Jun 21, 2016 6:42:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// You can put that value in a variable:\rval s \u003d if (x \u003e 0) 1 else -1",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 6:42:15 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466558607414_-1054928463",
      "id": "20160621-182327_1787472879",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "s: Int \u003d 1\n"
      },
      "dateCreated": "Jun 21, 2016 6:23:27 PM",
      "dateStarted": "Jun 21, 2016 6:42:15 PM",
      "dateFinished": "Jun 21, 2016 6:42:15 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// or we can write like, but we have to use `var`\nvar s \u003d 0\nif (x \u003e 0) s \u003d 1 else s \u003d -1",
      "authenticationInfo": {},
      "dateUpdated": "Jun 21, 2016 7:05:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466559660144_-646220627",
      "id": "20160621-184100_1844217894",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "s: Int \u003d 0\n"
      },
      "dateCreated": "Jun 21, 2016 6:41:00 PM",
      "dateStarted": "Jun 21, 2016 6:47:07 PM",
      "dateFinished": "Jun 21, 2016 6:47:07 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// but, if we have two different types of return value\nvar t: Any \u003d 0   //allows any type of value to return\nif (x \u003e 0) t \u003d \"positive\" else t \u003d -1  // there is a mixed return types",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 3:20:40 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466559837445_-135965320",
      "id": "20160621-184357_1500916419",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "t: Any \u003d 0\n"
      },
      "dateCreated": "Jun 21, 2016 6:43:57 PM",
      "dateStarted": "Jun 21, 2016 7:15:54 PM",
      "dateFinished": "Jun 21, 2016 7:15:54 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \nIn Scala, every expression is supposed to have some value and has a type.\n\nIf the else part is omitted, for example in ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 4:08:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466561341934_-108891690",
      "id": "20160621-190901_1694521830",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eIn Scala, every expression is supposed to have some value and has a type.\u003c/p\u003e\n\u003cp\u003eIf the else part is omitted, for example in\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 21, 2016 7:09:01 PM",
      "dateStarted": "Jun 22, 2016 4:08:03 AM",
      "dateFinished": "Jun 22, 2016 4:08:03 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "if (x \u003e 0) 1",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 3:50:32 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466592622491_-291984844",
      "id": "20160622-035022_526886279",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res97: AnyVal \u003d 1\n"
      },
      "dateCreated": "Jun 22, 2016 3:50:22 AM",
      "dateStarted": "Jun 22, 2016 3:50:32 AM",
      "dateFinished": "Jun 22, 2016 3:50:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nthen it is possible that the if statement yields no value.  This is finessed by introducing a class Unit that has one value, written as (). The if statement without an else is equivalent to",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 4:07:29 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466592632520_1509424830",
      "id": "20160622-035032_248922900",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003ethen it is possible that the if statement yields no value.  This is finessed by introducing a class Unit that has one value, written as (). The if statement without an else is equivalent to\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 22, 2016 3:50:32 AM",
      "dateStarted": "Jun 22, 2016 4:07:27 AM",
      "dateFinished": "Jun 22, 2016 4:07:27 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "if (x \u003e 0) 1 else ()",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 3:53:48 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466592758110_-386466152",
      "id": "20160622-035238_1381166461",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res99: AnyVal \u003d 1\n"
      },
      "dateCreated": "Jun 22, 2016 3:52:38 AM",
      "dateStarted": "Jun 22, 2016 3:53:48 AM",
      "dateFinished": "Jun 22, 2016 3:53:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThink of () as a placeholder for “no useful value,” and think of Unit as the analog of void in Java or C++.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 11:39:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466592828035_411026373",
      "id": "20160622-035348_2096231728",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eThink of () as a placeholder for “no useful value,” and think of Unit as the analog of void in Java or C++.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 22, 2016 3:53:48 AM",
      "dateStarted": "Jun 22, 2016 11:38:58 AM",
      "dateFinished": "Jun 22, 2016 11:38:58 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.2 Statement Termination",
      "text": "%md\nIn Scala—like in JavaScript and other scripting languages—a semicolon is never required if it falls just before the end of the line. A semicolon is also optional before an }, an else, and similar locations where it is clear from context that the end of a statement has been reached.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 12:58:29 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466594651799_-45081152",
      "id": "20160622-042411_168213217",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eIn Scala—like in JavaScript and other scripting languages—a semicolon is never required if it falls just before the end of the line. A semicolon is also optional before an }, an else, and similar locations where it is clear from context that the end of a statement has been reached.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 22, 2016 4:24:11 AM",
      "dateStarted": "Jun 22, 2016 11:33:38 AM",
      "dateFinished": "Jun 22, 2016 11:33:38 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.3 Block Expressions and Assignments",
      "text": "%md\nIn Scala, a { } block contains a sequence of expressions, and the result is also an expression. The value of the block is the value of the last expression. A block that ends with an assignment statement, such as `{ r \u003d r * n; n -\u003d 1 }` has a Unit value. ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 11:37:31 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466620338457_-1140794287",
      "id": "20160622-113218_476166324",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eIn Scala, a { } block contains a sequence of expressions, and the result is also an expression. The value of the block is the value of the last expression. A block that ends with an assignment statement, such as \u003ccode\u003e{ r \u003d r * n; n -\u003d 1 }\u003c/code\u003e has a Unit value.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 22, 2016 11:32:18 AM",
      "dateStarted": "Jun 22, 2016 11:37:29 AM",
      "dateFinished": "Jun 22, 2016 11:37:29 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": " 2.4 Input and Output",
      "text": "%md\nTo print a value, use the print or println function. The latter adds a new line after the printout. \n\nYou can read a line of input from the console with the readLine function. To read a \n* numeric, use readInt, readDouble, readByte, readShort, readLong, readFloat, \n* Boolean, use readBoolean or \n* character value, use  readChar. \n\nThe readLine method, but not the other ones, take a prompt string:\n\n```\nval name \u003d readLine(\"Your name: \")\nprint(\"Your age: \")\n\nval age \u003d readInt()\nprintf(\"Hello, %s! Next year, you will be %d.\\n\", name, age + 1)\n```\n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 1:21:40 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466620571746_-945236221",
      "id": "20160622-113611_1499965620",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eTo print a value, use the print or println function. The latter adds a new line after the printout.\u003c/p\u003e\n\u003cp\u003eYou can read a line of input from the console with the readLine function. To read a\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enumeric, use readInt, readDouble, readByte, readShort, readLong, readFloat,\u003c/li\u003e\n\u003cli\u003eBoolean, use readBoolean or\u003c/li\u003e\n\u003cli\u003echaracter value, use  readChar.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe readLine method, but not the other ones, take a prompt string:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eval name \u003d readLine(\"Your name: \")\nprint(\"Your age: \")\n\nval age \u003d readInt()\nprintf(\"Hello, %s! Next year, you will be %d.\\n\", name, age + 1)\n\u003c/code\u003e\u003c/pre\u003e\n"
      },
      "dateCreated": "Jun 22, 2016 11:36:11 AM",
      "dateStarted": "Jun 22, 2016 1:21:40 PM",
      "dateFinished": "Jun 22, 2016 1:21:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.5 Loops",
      "text": "%md\nThe construct `for (i \u003c- expr)` makes the variable i traverse all values of the expression to the right of the \u003c-.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 2:23:22 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466626671153_596018014",
      "id": "20160622-131751_489467045",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eThe construct \u003ccode\u003efor (i \u0026lt;- expr)\u003c/code\u003e makes the variable i traverse all values of the expression to the right of the \u0026lt;-.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 22, 2016 1:17:51 PM",
      "dateStarted": "Jun 22, 2016 2:23:22 PM",
      "dateFinished": "Jun 22, 2016 2:23:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "for (i \u003c- (1 to 5).filter(_ \u003e 3)) println(i)",
      "authenticationInfo": {},
      "dateUpdated": "Jun 22, 2016 11:42:12 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466630303733_1233521751",
      "id": "20160622-141823_799049687",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "4\n5\n"
      },
      "dateCreated": "Jun 22, 2016 2:18:23 PM",
      "dateStarted": "Jun 22, 2016 11:42:12 PM",
      "dateFinished": "Jun 22, 2016 11:42:12 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.6 Advanced for Loops and for Comprehensions",
      "text": "%md\nWe can have multiple _generators_ of the form `variable \u003c- expression`. Separate them by semicolons.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 1:45:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466664097889_-1615727516",
      "id": "20160622-234137_1254020833",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eWe can have multiple \u003cem\u003egenerators\u003c/em\u003e of the form \u003ccode\u003evariable \u0026lt;- expression\u003c/code\u003e. Separate them by semicolons.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 22, 2016 11:41:37 PM",
      "dateStarted": "Jun 23, 2016 1:45:11 AM",
      "dateFinished": "Jun 23, 2016 1:45:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "for (i \u003c- 1 to 3; j \u003c- 1 to 3) print(i * 10 + j + \" \")",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 1:48:24 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466665694509_1823720444",
      "id": "20160623-000814_1104409668",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "11 12 13 21 22 23 31 32 33 "
      },
      "dateCreated": "Jun 23, 2016 12:08:14 AM",
      "dateStarted": "Jun 23, 2016 1:48:11 AM",
      "dateFinished": "Jun 23, 2016 1:48:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nEach generator can have a _guard_, a Boolean condition preceded by if:",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 1:48:31 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466671533292_-581021552",
      "id": "20160623-014533_829154818",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eEach generator can have a \u003cem\u003eguard\u003c/em\u003e, a Boolean condition preceded by if:\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 1:45:33 AM",
      "dateStarted": "Jun 23, 2016 1:47:44 AM",
      "dateFinished": "Jun 23, 2016 1:47:44 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " for (i \u003c- 1 to 3; j \u003c- 1 to 3 if i !\u003d j) print((10 * i + j) + \" \")  //there is no semicolon before if",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 1:50:01 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466671664374_-2113512527",
      "id": "20160623-014744_186316841",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "12 13 21 23 31 32 "
      },
      "dateCreated": "Jun 23, 2016 1:47:44 AM",
      "dateStarted": "Jun 23, 2016 1:50:01 AM",
      "dateFinished": "Jun 23, 2016 1:50:01 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nYou can have any number of _definitions_, introducing variables that can be used inside the loop. This will be very useful to work with `yield`",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 2:33:49 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466671678026_-462909097",
      "id": "20160623-014758_1878990396",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eYou can have any number of definitions, introducing variables that can be used inside the loop:\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 1:47:58 AM",
      "dateStarted": "Jun 23, 2016 2:32:25 AM",
      "dateFinished": "Jun 23, 2016 2:32:25 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "for (i \u003c- 1 to 3; from \u003d 4 - i; j \u003c- from to 3) print((10 * i + j) + \" \")   //`from` is varible",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 2:31:49 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466674244801_-1696568433",
      "id": "20160623-023044_624092114",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "13 22 23 31 32 33 "
      },
      "dateCreated": "Jun 23, 2016 2:30:44 AM",
      "dateStarted": "Jun 23, 2016 2:31:49 AM",
      "dateFinished": "Jun 23, 2016 2:31:50 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "for (i \u003c- 1 to 3; from \u003d 4 - i; j \u003c- from to 3) yield i % 3",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 2:46:35 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466674309838_-2057939596",
      "id": "20160623-023149_906494905",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res176: scala.collection.immutable.IndexedSeq[Int] \u003d Vector(1, 2, 2, 0, 0, 0)\n"
      },
      "dateCreated": "Jun 23, 2016 2:31:49 AM",
      "dateStarted": "Jun 23, 2016 2:46:35 AM",
      "dateFinished": "Jun 23, 2016 2:46:35 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.7 Functions",
      "text": "%md\nA method operates on an object, but a function doesn’t.\nWith a recursive function, you must specify the return type. ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 2:50:34 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466674697825_-1755358394",
      "id": "20160623-023817_54458453",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eA method operates on an object, but a function doesn’t.\n\u003cbr  /\u003eWith a recursive function, you must specify the return type.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 2:38:17 AM",
      "dateStarted": "Jun 23, 2016 2:50:30 AM",
      "dateFinished": "Jun 23, 2016 2:50:30 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.8 Default and Named Arguments",
      "text": "%md\nYou can provide default arguments for functions that are used when you don’t specify explicit values. For example,\n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 4:44:49 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466682112512_1574702686",
      "id": "20160623-044152_1436146597",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eYou can provide default arguments for functions that are used when you don’t specify explicit values. For example,\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 4:41:52 AM",
      "dateStarted": "Jun 23, 2016 4:44:45 AM",
      "dateFinished": "Jun 23, 2016 4:44:45 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def decorate(str: String, left: String \u003d \"[\", right: String \u003d \"]\") \u003d {left + str + right}\n\nvar s1 \u003d decorate(\"hello\")  //use default\ns1 \u003d decorate(left \u003d \"\u003e\u003e\u003e[\",str \u003d \"hello\", right \u003d \"]\u003c\u003c\u003c\")\n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 8:06:44 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466682226480_1384052766",
      "id": "20160623-044346_2079588947",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "decorate: (str: String, left: String, right: String)String\ns1: String \u003d [hello]\ns1: String \u003d \u003e\u003e\u003e[hello]\u003c\u003c\u003c\n"
      },
      "dateCreated": "Jun 23, 2016 4:43:46 AM",
      "dateStarted": "Jun 23, 2016 8:06:44 AM",
      "dateFinished": "Jun 23, 2016 8:06:44 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNamed arguments can make a function call more readable. They are also useful if a function has many default parameters, and we do not have to call it in order. ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 8:09:09 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466682406763_1838870294",
      "id": "20160623-044646_1663640904",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eNamed arguments can make a function call more readable. They are also useful if a function has many default parameters, and we do not have to call it in order.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 4:46:46 AM",
      "dateStarted": "Jun 23, 2016 8:09:06 AM",
      "dateFinished": "Jun 23, 2016 8:09:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.9 Variable Arguments",
      "text": "%md\nIt would be convenient to implement a function that takes variable number of arguments. For example,\n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 8:49:51 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466694456556_440871076",
      "id": "20160623-080736_1590348259",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eIt would be convenient to implement a function that takes variable number of arguments. For example,\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 8:07:36 AM",
      "dateStarted": "Jun 23, 2016 8:49:47 AM",
      "dateFinished": "Jun 23, 2016 8:49:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def sum(args: Int*) \u003d {  //* here indicates varible number of input \n    var result \u003d 0\n    for (arg \u003c- args) result +\u003d arg   //the result here is not enough\n    result  //we need this to return the result\n}\n\nvar s2 \u003d sum(1, 4, 9, 16, 25)\ns2 \u003d sum(1, 2, 3)",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 9:03:15 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466696987001_-873201304",
      "id": "20160623-084947_693569271",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "sum: (args: Int*)Int\ns2: Int \u003d 55\ns2: Int \u003d 6\n"
      },
      "dateCreated": "Jun 23, 2016 8:49:47 AM",
      "dateStarted": "Jun 23, 2016 9:03:15 AM",
      "dateFinished": "Jun 23, 2016 9:03:16 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// however, we can not pass sequence of number into it, we need to one at time.\nvar s3 \u003d sum(1 to 5)  //this will create error, `1 to 5` is sequence, it needs integer.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 9:38:39 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466697195598_1409050906",
      "id": "20160623-085315_764343277",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:30: error: type mismatch;\n found   : scala.collection.immutable.Range.Inclusive\n required: Int\n       var s3 \u003d sum(1 to 5)  //this will create error\n                      ^\n"
      },
      "dateCreated": "Jun 23, 2016 8:53:15 AM",
      "dateStarted": "Jun 23, 2016 9:06:42 AM",
      "dateFinished": "Jun 23, 2016 9:06:42 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "var s3 \u003d sum(1 to 5: _*)  //need more explanation here, `1 to 5` as argument sequence\ns3 \u003d sum(List(1, 2, 3): _*)",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 9:34:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466698002124_-1067561687",
      "id": "20160623-090642_1292246839",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "s3: Int \u003d 15\ns3: Int \u003d 6\n"
      },
      "dateCreated": "Jun 23, 2016 9:06:42 AM",
      "dateStarted": "Jun 23, 2016 9:34:38 AM",
      "dateFinished": "Jun 23, 2016 9:34:38 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.10 Procedures",
      "text": "%md\nWhen a function does not return value, we call such a _function_ as a _procedure_. There is no `\u003d` in front of function body, or we can add a `Unit` as return type.  ",
      "dateUpdated": "Jun 23, 2016 9:57:32 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466698131131_1494263412",
      "id": "20160623-090851_395595668",
      "dateCreated": "Jun 23, 2016 9:08:51 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def box(s : String) { // Look carefully: no \u003d \r    val border \u003d \"-\" * s.length + \"--\\n\"\r    println(border + \"|\" + s + \"|\\n\" + border)\r}",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 10:04:59 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466701081646_-63373635",
      "id": "20160623-095801_451259704",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:29: error: value println is not a member of String\npossible cause: maybe a semicolon is missing before `value println\u0027?\n    println(border + \"|\" + s + \"|\\n\" + border)\n    ^\n"
      },
      "dateCreated": "Jun 23, 2016 9:58:01 AM",
      "dateStarted": "Jun 23, 2016 10:04:59 AM",
      "dateFinished": "Jun 23, 2016 10:04:59 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def box(s: String) {\n    val border \u003d \"-\" * s.length + \"--\\n\"\n    println(border + \"|\" + s + \"|\\n\" + border)\n}\nbox(\"hello\")\n\n//or use def box(s:String): Unit \u003d {...}",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 10:09:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466701402888_1554756000",
      "id": "20160623-100322_1703475513",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "box: (s: String)Unit\n-------\n|hello|\n-------\n\n"
      },
      "dateCreated": "Jun 23, 2016 10:03:22 AM",
      "dateStarted": "Jun 23, 2016 10:08:46 AM",
      "dateFinished": "Jun 23, 2016 10:08:46 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.11 Lazy Values",
      "text": "%md\nWhen a val is declared as lazy, its initialization is deferred until it is accessed for the first time. For example,\n",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 10:15:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466701545817_1477603717",
      "id": "20160623-100545_1785523861",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eWhen a val is declared as lazy, its initialization is deferred until it is accessed for the first time. For example,\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 10:05:45 AM",
      "dateStarted": "Jun 23, 2016 10:15:28 AM",
      "dateFinished": "Jun 23, 2016 10:15:28 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "lazy val words \u003d scala.io.Source.fromFile(\"/usr/share/dict/words\").mkString",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 10:19:07 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466702128170_15589069",
      "id": "20160623-101528_912809532",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "words: String \u003d \u003clazy\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 10:15:28 AM",
      "dateStarted": "Jun 23, 2016 10:19:07 AM",
      "dateFinished": "Jun 23, 2016 10:19:08 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nIf the program never accesses _words_, file words will never be read. Lazy values are useful to delay costly initialization. ",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 10:27:34 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466702347938_-1294405960",
      "id": "20160623-101907_1956795975",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eIf the program never accesses \u003cem\u003ewords\u003c/em\u003e, file words will never be read. Lazy values are useful to delay costly initialization.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 10:19:07 AM",
      "dateStarted": "Jun 23, 2016 10:27:23 AM",
      "dateFinished": "Jun 23, 2016 10:27:23 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2.12 Exception",
      "text": "%md\nAs in Java, the objects that you throw need to belong to a subclass of `java.lang.Throwable`. However, unlike Java, Scala has no “checked” exceptions—you never have to declare that a function or method might throw an exception.",
      "authenticationInfo": {},
      "dateUpdated": "Jun 23, 2016 10:37:35 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466702843622_-1886614427",
      "id": "20160623-102723_2070986469",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eAs in Java, the objects that you throw need to belong to a subclass of \u003ccode\u003ejava.lang.Throwable\u003c/code\u003e. However, unlike Java, Scala has no “checked” exceptions—you never have to declare that a function or method might throw an exception.\u003c/p\u003e\n"
      },
      "dateCreated": "Jun 23, 2016 10:27:23 AM",
      "dateStarted": "Jun 23, 2016 10:37:32 AM",
      "dateFinished": "Jun 23, 2016 10:37:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466703438837_-2021590127",
      "id": "20160623-103718_1739362826",
      "dateCreated": "Jun 23, 2016 10:37:18 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Scala - 1 Basic, 2 Control Structure and Functions ",
  "id": "2BP5NCPWQ",
  "angularObjects": {
    "2BJNWTGVX:shared_process": [],
    "2BHQR9UME:shared_process": [],
    "2BKZJ4SRP:shared_process": [],
    "2BME5YFFH:shared_process": [],
    "2BN58QNE3:shared_process": [],
    "2BKB225AF:shared_process": [],
    "2BK2WJSB5:shared_process": [],
    "2BJUP28CV:shared_process": [],
    "2BM3A9BK4:shared_process": [],
    "2BJ14398P:shared_process": [],
    "2BN46FG7A:shared_process": [],
    "2BJEPGMRU:shared_process": [],
    "2BM6T2CVF:shared_process": [],
    "2BK1W54BQ:shared_process": [],
    "2BMYC3FF3:shared_process": [],
    "2BKZFCDHR:shared_process": [],
    "2BJSW731A:shared_process": [],
    "2BJDU2EXK:shared_process": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}